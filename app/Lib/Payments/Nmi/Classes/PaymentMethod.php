<?php

namespace App\Lib\Payments\Nmi\Classes;

use App\Lib\Payments\Nmi\Interfaces\PaymentMethodProvider;

class PaymentMethod implements PaymentMethodProvider
{

    public const ACCOUNT_TYPE_CHECKING = 'checking';
    public const ACCOUNT_TYPE_SAVINGS = 'savings';

    public const ACCOUNT_HOLDER_TYPE_BUSINESS = 'business';
    public const ACCOUNT_HOLDER_TYPE_PERSONAL = 'personal';

    public const SEC_CODE_PPD      = 'PPD';
    public const SEC_CODE_WEB      = 'WEB';
    public const SEC_CODE_TEL      = 'TEL';
    public const SEC_CODE_CCD      = 'CCD';
    public const SEC_CODE_PERSONAL = 'personal';

    public const PAYMENT_TYPE_CREDIT_CARD  = 'creditcard';
    public const PAYMENT_TYPE_CREDIT_CHECK = 'check';
    public const PAYMENT_TYPE_CREDIT_CASH  = 'cash';

    public const TEST_MODE_CC_EXP                     = '1025';
    public const TEST_MODE_CC_NUMBER_VISA             = '4111111111111111';
    public const TEST_MODE_CC_NUMBER_MASTERCARD       = '5431111111111111';
    public const TEST_MODE_CC_NUMBER_AMERICAN_EXPRESS = '341111111111111';
    public const TEST_MODE_CC_NUMBER_DISCOVER         = '6011601160116611';
    public const TEST_MODE_CC_NUMBER_DINERS_CLUB      = '30205252489926';
    public const TEST_MODE_CC_NUMBER_JCB              = '3541963594572595';
    public const TEST_MODE_CC_NUMBER_MAESTRO          = '6799990100000000019';
    public const TEST_MODE_CC_NUMBER_INVALID          = '1111111111111111'; // Used to trigger a fatal error message
    public const TEST_MODE_ACH_ACCOUNT_NUMBER         = '123123123';
    public const TEST_MODE_ACH_ROUTING_NUMBER         = '123123123';

    public const VOID_REASON_FRAUD               = 'fraud';
    public const VOID_REASON_USER_CANCEL         = 'user_cancel';
    public const VOID_REASON_ICC_REJECTED        = 'icc_rejected';
    public const VOID_REASON_ICC_CARD_REMOVED    = 'icc_card_removed';
    public const VOID_REASON_ICC_NO_CONFIRMATION = 'icc_no_confirmation';
    public const VOID_REASON_POS_TIMEOUT         = 'pos_timeout';

    /**
     * Used in test mode to To simulate an CVV match.
     */
    public const TEST_MODE_CVV = '999';

    /**
     * The tokenized version of the customer's card or check information.
     * This will be generated by Collect.js and is usable only once.
     * @var string|null
     */
    protected ?string $paymentToken = null;

    /**
     * @var int|null
     */
    protected ?int $ccNumber = null;

    /**
     * Format MMYY
     * @var string|null
     */
    protected ?string $ccExp = null;

    /**
     * @var int|null
     */
    protected ?int $cvv = null;

    /**
     * The name on the customer's ACH account.
     * @var string|null
     */
    protected ?string $checkName = null;

    /**
     * The customer's bank routing number.
     * @var string|null
     */
    protected ?string $checkAba = null;

    /**
     * The customer's bank account number.
     * @var string|null
     */
    protected ?string $checkAccount = null;

    /**
     * The type of ACH account the customer has.
     * Values: one of the ACCOUNT_TYPE_HOLDER_X constants
     * @var string|null
     */
    protected ?string $accountHolderType = null;

    /**
     * The type of ACH account the customer has.
     * Values: one of the ACCOUNT_TYPE_X constants
     * @var string|null
     */
    protected ?string $accountType = null;

    /**
     * The Standard Entry Class code of the ACH transaction.
     * Values: one of the SEC_CODE_X constants
     * @var string|null
     */
    protected ?string $secCode = null;

    /**
     * Surcharge amount.
     * Format: x.xx
     * @var string|null
     */
    protected ?string $surcharge = null;

    /**
     * The transaction currency. Format: ISO 4217
     * @var string|null
     */
    protected ?string $currency = null;


    /**
     * The type of payment
     * Values: one of the PAYMENT_TYPE_X constants
     * @var string|null
     */
    protected ?string $payment = self::PAYMENT_TYPE_CREDIT_CARD;

    /**
     * If using Multiple MIDs, route to this processor
     * (processorId is obtained under Settings â†’ Transaction Routing in the NMI Control Panel).
     * @var string|null
     */
    protected ?string $processorId = null;

    /**
     * Specify authorization code. For use with "offline" action only.
     * @var string|null
     */
    protected ?string $authorizationCode = null;

    /**
     * The transaction id of the original transaction.
     * @var string|null
     */
    protected ?string $transactionId = null;

    /**
     * values: one of the VOID_REASON_X constants
     * @var string|null
     */
    protected ?string $voidReason = null;

    /**
     * @return int|null
     */
    public function getCvv(): ?int
    {
        return $this->cvv;
    }

    /**
     * @param int|null $cvv
     * @return PaymentMethodProvider
     */
    public function setCvv(?int $cvv): PaymentMethodProvider
    {
        $this->cvv = $cvv;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCheckName(): ?string
    {
        return $this->checkName;
    }

    /**
     * @param string|null $checkName
     * @return PaymentMethodProvider
     */
    public function setCheckName(?string $checkName): PaymentMethodProvider
    {
        $this->checkName = $checkName;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCheckAba(): ?string
    {
        return $this->checkAba;
    }

    /**
     * @param string|null $checkAba
     * @return PaymentMethodProvider
     */
    public function setCheckAba(?string $checkAba): PaymentMethodProvider
    {
        $this->checkAba = $checkAba;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCheckAccount(): ?string
    {
        return $this->checkAccount;
    }

    /**
     * @param string|null $checkAccount
     * @return PaymentMethodProvider
     */
    public function setCheckAccount(?string $checkAccount): PaymentMethodProvider
    {
        $this->checkAccount = $checkAccount;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getAccountHolderType(): ?string
    {
        return $this->accountHolderType;
    }

    /**
     * @param string|null $accountHolderType
     * @return PaymentMethodProvider
     */
    public function setAccountHolderType(?string $accountHolderType): PaymentMethodProvider
    {
        $this->accountHolderType = $accountHolderType;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getAccountType(): ?string
    {
        return $this->accountType;
    }

    /**
     * @param string|null $accountType
     * @return PaymentMethodProvider
     */
    public function setAccountType(?string $accountType): PaymentMethodProvider
    {
        $this->accountType = $accountType;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getSecCode(): ?string
    {
        return $this->secCode;
    }

    /**
     * @param string|null $secCode
     * @return PaymentMethodProvider
     */
    public function setSecCode(?string $secCode): PaymentMethodProvider
    {
        $this->secCode = $secCode;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getSurcharge(): ?string
    {
        return $this->surcharge;
    }

    /**
     * @param string|null $surcharge
     * @return PaymentMethodProvider
     */
    public function setSurcharge(?string $surcharge): PaymentMethodProvider
    {
        $this->surcharge = $surcharge;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * @param string|null $currency
     * @return PaymentMethodProvider
     */
    public function setCurrency(?string $currency): PaymentMethodProvider
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getPayment(): ?string
    {
        return $this->payment;
    }

    /**
     * @param string|null $paymentType
     * @return PaymentMethodProvider
     */
    public function setPaymentType(?string $paymentType): PaymentMethodProvider
    {
        $this->payment = $paymentType;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getProcessorId(): ?string
    {
        return $this->processorId;
    }

    /**
     * @param string|null $processorId
     * @return PaymentMethodProvider
     */
    public function setProcessorId(?string $processorId): PaymentMethodProvider
    {
        $this->processorId = $processorId;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getAuthorizationCode(): ?string
    {
        return $this->authorizationCode;
    }

    /**
     * @param string|null $authorizationCode
     * @return PaymentMethodProvider
     */
    public function setAuthorizationCode(?string $authorizationCode): PaymentMethodProvider
    {
        $this->authorizationCode = $this->authorizationCode = $authorizationCode;

        return $this;
    }


    /**
     * @return string|null
     */
    public function getPaymentToken(): ?string
    {
        return $this->paymentToken;
    }

    /**
     * @param string|null $paymentToken
     * @return PaymentMethodProvider
     */
    public function setPaymentToken(?string $paymentToken): PaymentMethodProvider
    {
        $this->paymentToken = $paymentToken;

        return $this;
    }

    /**
     * @return int|null
     */
    public function getCcnumber(): ?int
    {
        return $this->ccNumber;
    }

    /**
     * @param int|null $ccNumber
     * @return PaymentMethodProvider
     */
    public function setCcnumber(?int $ccNumber): PaymentMethodProvider
    {
        $this->ccNumber = $ccNumber;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getCcExp(): ?string
    {
        return $this->ccExp;
    }

    /**
     * @param string|null $ccExp
     * @return PaymentMethodProvider
     */
    public function setCcExp(?string $ccExp): PaymentMethodProvider
    {
        $this->ccExp = $ccExp;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getTransactionId(): ?string
    {
        return $this->transactionId;
    }

    /**
     * @param string|null $transactionId
     * @return PaymentMethodProvider
     */
    public function setTransactionId(?string $transactionId): PaymentMethodProvider
    {
        $this->transactionId = $transactionId;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getVoidReason(): ?string
    {
        return $this->voidReason;
    }

    /**
     * @param string|null $voidReason
     * @return PaymentMethodProvider
     */
    public function setVoidReason(?string $voidReason): PaymentMethodProvider
    {
        $this->voidReason = $voidReason;

        return $this;
    }

    /**
     * Get the instance as an array.
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'payment_token'          => $this->paymentToken,
            'ccnumber'               => $this->ccNumber,
            'ccexp'                  => $this->ccExp,
            'cvv'                    => $this->cvv,
            'checkname'              => $this->checkName,
            'checkaba'               => $this->checkAba,
            'checkaccount'           => $this->checkAccount,
            'account_holder_type'    => $this->accountHolderType,
            'account_type'           => $this->accountType,
            'sec_code'               => $this->secCode,
            'surcharge'              => $this->surcharge,
            'currency'               => $this->currency,
            'payment'                => $this->payment,
            'processor_id'           => $this->processorId,
            'transactionid'          => $this->transactionId,
            'void_reason'            => $this->voidReason,
            /**
             * The auth code of the original transaction.
             * synced with authorizationCode but provided as a separate
             * properties due to api requirements
             */
            'authorization_code'     => $this->authorizationCode,
            'authorizationcode'      => $this->authorizationCode,
        ];
    }
}
